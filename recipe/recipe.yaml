context:
  name: hf-xet
  version: "1.1.6"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/h/hf-xet/hf_xet-${{ version }}.tar.gz
  sha256: 7a5c2fbf540240705e2131de767116c3eaa157bca795ed3b2ed2cc63f801f2e3
  patches:
    # NOTE: Cross-compilation with pyo3 is failing on osx-arm64 so we disable
    # the auto-initialize feature of pyo3 for all the builds. It has no consequence
    # on the final package except when embedding Python in a Rust application where the
    # Python interpreter must be manually initialized.
    - disable-auto-initialize.patch

build:
  number: 0
  script:
    - if: unix
      then:
        # https://github.com/rust-lang/cargo/issues/10583#issuecomment-1129997984
        - export CARGO_NET_GIT_FETCH_WITH_CLI=true
        # Optimize the Cargo build
        - export CARGO_PROFILE_RELEASE_STRIP=symbols
        - export CARGO_PROFILE_RELEASE_LTO=fat
        # Deal with OpenSSL vendoring
        - export OPENSSL_DIR="$PREFIX"
        # Install the Python package using maturin
        - python -m pip install . -vv --no-deps --no-build-isolation
        # Generate the THIRDPARTY.yml file
        - cargo-bundle-licenses --format yaml --output ${SRC_DIR}/THIRDPARTY.yml

    - if: win
      then:
        # https://github.com/rust-lang/cargo/issues/10583#issuecomment-1129997984
        - set CARGO_NET_GIT_FETCH_WITH_CLI=true
        # Optimize the Cargo build
        - set CARGO_PROFILE_RELEASE_STRIP=symbols
        - set CARGO_PROFILE_RELEASE_LTO=fat
        # Deal with OpenSSL vendoring
        - set OPENSSL_DIR=%LIBRARY_PREFIX%
        # Install the Python package using maturin
        - python -m pip install . -vv --no-deps --no-build-isolation
        # Generate the THIRDPARTY.yml file
        - cargo-bundle-licenses --format yaml --output %SRC_DIR%\THIRDPARTY.yml || goto :error

  skip: not (match(python, python_min ~ ".*") and is_abi3)
  python:
    version_independent: true

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - maturin >=1.7,<2.0
        - openssl

    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}
    - ${{ compiler('rust') }}
    - cargo-bundle-licenses
    - pkg-config
  host:
    - python
    - python-abi3
    - pip
    - maturin >=1.7,<2.0
    - openssl
  run:
    - python

tests:
  - python:
      imports:
        - hf_xet
      python_version: ["${{ python_min ~ '.*' }}"]
      pip_check: true
  - script:
      # NOTE: we must manually set SP_DIR since it is not set.
      # Can be removed once https://github.com/prefix-dev/rattler-build/issues/1733 is fixed.
      - if: unix
        then:
          - export SP_DIR=$(python -c "import site; print(site.getsitepackages()[0])")
          - abi3audit $SP_DIR/hf_xet/hf_xet.abi3.so -s -v --assume-minimum-abi3 ${{ python_min }}
      - if: win
        then:
          - set "SP_DIR=%PREFIX%\\Lib\\site-packages"
          - abi3audit %SP_DIR%\\hf_xet\\hf_xet.pyd -s -v --assume-minimum-abi3 ${{ python_min }}
    requirements:
      run:
        - abi3audit

about:
  homepage: https://pypi.org/project/hf-xet/
  repository: https://github.com/huggingface/xet-core
  summary: |
    xet-core enables huggingface_hub to utilize xet storage for uploading and
    downloading to HF Hub. Xet storage provides chunk-based deduplication,
    efficient storage/retrieval with local disk caching, and backwards
    ompatibility with Git LFS. This library is not meant to be used directly,
    and is instead intended to be used from huggingface_hub.
    <br/>
    hf_xet: Python integration with Rust code, uses maturin to build hfxet
    Python package. Main integration with HF Hub Python package.
  license: Apache-2.0
  license_file:
    - LICENSE
    - THIRDPARTY.yml

extra:
  recipe-maintainers:
    - shermansiu
    - hadim
